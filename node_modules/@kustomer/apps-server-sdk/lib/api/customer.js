"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Customers = void 0;
const base_1 = require("./base");
class Customers extends base_1.APIBase {
    constructor(token, orgName, options) {
        super(token, 'customers', orgName, options);
    }
    /**
     * get a customer by id
     * @param id customer id (unique)
     */
    async getById(id) {
        try {
            const res = await this.axios.get(`${this.baseUrls.api}/v1/customers/id=${id}`);
            return {
                id: res.data.data.id,
                ...res.data.data.attributes
            };
        }
        catch (err) {
            return;
        }
    }
    /**
     * get a customer by email
     * @param email customer email (unique)
     */
    async getByEmail(email) {
        try {
            const res = await this.axios.get(`${this.baseUrls.api}/v1/customers/email=${email}`);
            return {
                id: res.data.data.id,
                ...res.data.data.attributes
            };
        }
        catch (err) {
            return;
        }
    }
    /**
     * get a customer by phone
     * @param phone customer phone (unique)
     * @returns
     */
    async getByPhone(phone) {
        try {
            const res = await this.axios.get(`${this.baseUrls.api}/v1/customers/phone=${phone}`);
            return {
                id: res.data.data.id,
                ...res.data.data.attributes
            };
        }
        catch (err) {
            return;
        }
    }
    /**
     * create a new customer
     */
    async create(args) {
        const res = await this.axios.post(`${this.baseUrls.api}/v1/customers`, args);
        return {
            id: res.data.data.id,
            ...res.data.data.attributes
        };
    }
    /**
     * update an existing customer
     * @param id customer id (unique)
     */
    async update(id, args) {
        const res = await this.axios.patch(`${this.baseUrls.api}/v1/customers/${id}`, args);
        return {
            id: res.data.data.id,
            ...res.data.data.attributes
        };
    }
    /**
     * create a kobject for a customer
     * @param id customer id (unique)
     * @param klass klass name
     */
    async createKObject(id, klass, object) {
        const res = await this.axios.post(`${this.baseUrls.api}/v1/customers/${id}/klasses/${this.options.app}--${klass}`, object);
        return {
            id: res.data.data.id,
            ...res.data.data.attributes
        };
    }
}
exports.Customers = Customers;
//# sourceMappingURL=customer.js.map