import express from 'express';
import { AppOptions } from './options';
import { EventCallback, EventResources } from './event';
import { Logger } from './logger';
import { Manifest } from './manifest';
import * as components from './components';
import * as api from './api';
/**
 * Kustomer App
 */
export declare class KApp {
    readonly options: AppOptions;
    /**
     * triggered when your app is installed
     * @param userId user that installed the app
     * @param orgId org that the app was installed in
     */
    onInstall?: (userId: string, orgId: string) => void;
    /**
     * triggered when your app is enabled
     * @param userId user that enabled the app
     * @param orgId org that the app was enabled in
     */
    onEnable?: (userId: string, orgId: string) => void;
    /**
     * triggered when your app is disabled
     * @param userId user that disabled the app
     * @param orgId org that the app was disabled in
     */
    onDisable?: (userId: string, orgId: string) => void;
    /**
     * app logger instance that can be used to log to stdout.
     * To view use `set DEBUG=kapp*`
     */
    readonly log: Logger;
    /**
     * express app instance
     */
    get app(): express.Application;
    private readonly _app;
    private _server?;
    /**
     * the apps manifest that acts as the apps version state
     */
    get manifest(): Manifest;
    private readonly _manifest;
    /**
     * environment base urls
     */
    get baseUrls(): {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    } | {
        gateway: string;
        api: string;
        web: string;
    };
    private readonly _token;
    private readonly _commands;
    private readonly _events;
    private readonly _hooks;
    /**
     * Kustomer App
     */
    constructor(options: AppOptions);
    /**
     * start app server and publish new app version if necessary
     * @param port the port your app server will run on (defaults to 80)
     * @param publish should your app attempt to publish a new version on startup?
     */
    start(port?: number, publish?: boolean): Promise<void>;
    /**
     * stop app server
     */
    stop(): Promise<void>;
    in(name: string): api.Orgs;
    /**
     * add a command to the app that will be created on install
     * @param name name of command (unique)
     * @param options command options
     * @param callback method that will be called when the action is triggered
     */
    onCommand(name: string, callback: components.CommandCallback): void;
    onCommand(name: string, options: components.CommandOptions, callback: components.CommandCallback): void;
    /**
     * listen for a hook `[POST] /orgs/:org/hooks/:hook`
     * @param name name of hook (unique)
     * @param callback
     */
    onHook<Q = any, H = any, B = any>(name: string, callback: (org: string, query: Q, headers: H, body: B) => any): void;
    /**
     * listen for auth requests
     * `[GET] /auth`
     * @param callback
     */
    onAuth(callback: express.RequestHandler): void;
    /**
     * listen for auth redirect requests
     * `[GET] /auth/redirect`
     * @param callback
     */
    onAuthComplete(callback: express.RequestHandler): void;
    /**
     * subscribe to a system event
     * @param resource data type
     * @param action action being performed on data type
     */
    on<R extends keyof EventResources, A extends keyof EventResources[R]>(resource: R, action: A, callback: EventCallback<EventResources[R][A]>): void;
    /**
     * add a Klass to the app that will be created on install
     * @param name name of the klass (unique)
     * @param options options to create a klass
     */
    useKlass(name: string, options: components.KlassOptions): void;
    /**
     * add a JSX KView to the app that will be created on install
     * @param name name of the kview (unique)
     * @param template string representation of what Kustomer will attempt to render. This can be vanilla HTML, JS, or JSX
     * @param options options to create a kview
     */
    useView(name: string, template: string, options: components.KViewOptions): void;
    /**
     * add a custom view that will be created on install, rendered via an iframe.
     * `[GET] /views/:name`
     * @param name name of the kview (unique)
     * @param pathTo path to the build directory that contains your index.html
     * @param options options to create a custom kview
     */
    useCustomView(name: string, pathTo: string, options: components.KViewOptions): void;
    /**
     * add a custom settings view that will be rendered via iframe
     * `[GET] /views/settings`
     * @param title page title
     * @param description page description
     * @param pathTo path to the build directory that contains your index.html
     */
    useCustomSettings(title: string, description: string, pathTo: string): void;
    private _onHealth;
    private _onInstall;
    private _onEnable;
    private _onDisable;
    private _onCommand;
    private _onEvent;
    private _onHook;
}
