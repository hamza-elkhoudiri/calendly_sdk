/** The location in Kustomer where the Kview will be displayed */
export declare type KViewContext = 'expanded-timeline' | 'smartbar-details' | 'smartbar-card';
/** Determines when a kview will be displayed */
export declare type KViewResource = 'customer' | 'conversation' | 'company' | 'kobject';
export interface KViewOptions {
    /** The location in Kustomer where the Kview will be displayed */
    context: KViewContext;
    /** Determines when a kview will be displayed */
    resource: KViewResource;
    /** klass name to render data for */
    klass?: string;
    /** The name of the Kview that will be displayed within the Kview Editor in Kustomer  */
    displayName?: string;
    /** A Material-UI icon name for displaying within the Insight Panel  */
    icon?: string;
    /** The state of the view on init */
    state?: 'open' | 'closed';
}
/**
 * Small chunks of JSX (either direct or an iframe-based CardJsCard), which allows for visual extensions and interactive functionality within the Kustomer UI. These can be loaded in a variety of places, such as within the Timeline, as a Card in the insights Panel, or as a Widget.
 */
export interface KView {
    /** The location in Kustomer where the Kview will be displayed */
    context: KViewContext;
    /** Contains higher level display information for the kview  */
    meta: {
        /** A Material-UI icon name for displaying within the Insight Panel  */
        icon?: string;
        /** The name of the Kview that will be displayed within the Kview Editor in Kustomer  */
        displayName?: string;
        /** The state of the view on init */
        state?: 'open' | 'closed';
    };
    /** The name of the Kview */
    name: string;
    /** Determines when a kview will be displayed */
    resource: string;
    /** The string representation of what Kustomer will attempt to render. This can be vanilla HTML, JS, or JSX */
    template: string;
}
